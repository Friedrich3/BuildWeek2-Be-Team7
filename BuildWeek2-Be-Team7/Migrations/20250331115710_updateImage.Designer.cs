// <auto-generated />
using System;
using BuildWeek2_Be_Team7.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BuildWeek2_Be_Team7.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250331115710_updateImage")]
    partial class updateImage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Animali.Hospitalization", b =>
                {
                    b.Property<Guid>("HospitalizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("HospitalizationId");

                    b.HasIndex("PetId");

                    b.ToTable("Hospitalizations");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Animali.MedicalExam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExamId");

                    b.HasIndex("PetId");

                    b.HasIndex("VetId");

                    b.ToTable("MedicalExams");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Animali.Pet", b =>
                {
                    b.Property<Guid>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isMicrochip")
                        .HasColumnType("bit");

                    b.HasKey("PetId");

                    b.HasIndex("RaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Animali.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RaceId");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            RaceId = 1,
                            Name = "Cane"
                        },
                        new
                        {
                            RaceId = 2,
                            Name = "Gatto"
                        },
                        new
                        {
                            RaceId = 3,
                            Name = "Coniglio"
                        },
                        new
                        {
                            RaceId = 4,
                            Name = "Animali esotici"
                        });
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Auth.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "66D7DB2A-56A6-4E65-90A2-26A33701C613",
                            ConcurrencyStamp = "66D7DB2A-56A6-4E65-90A2-26A33701C613",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "B0B023D5-5C9A-430F-B38F-53D8781BAEA9",
                            ConcurrencyStamp = "B0B023D5-5C9A-430F-B38F-53D8781BAEA9",
                            Name = "Veterinario",
                            NormalizedName = "VETERINARIO"
                        },
                        new
                        {
                            Id = "91745C18-A978-4202-81D9-BDAC8CB5E2F0",
                            ConcurrencyStamp = "91745C18-A978-4202-81D9-BDAC8CB5E2F0",
                            Name = "Farmacista",
                            NormalizedName = "FARMACISTA"
                        },
                        new
                        {
                            Id = "6DD52BC5-AC79-4A54-B6CD-302475F6E068",
                            ConcurrencyStamp = "6DD52BC5-AC79-4A54-B6CD-302475F6E068",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("CodiceFiscale")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CodiceFiscale")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Auth.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cibo secco"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cibo umido"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Integratori"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Antibiotici"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Analgesici"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Antiparassitari"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Vaccini"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Sistema Cardiovascolare"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sistema Respiratorio"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Sistema Gastrointestinale"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Oftalmici"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Dermatologici"
                        });
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Drawer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drawers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Alta rotazione",
                            Position = "Center left"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Emergenza",
                            Position = "Top left"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Uso Comune",
                            Position = "Center right"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Specialistici",
                            Position = "Bottom left"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Refrigerati",
                            Position = "Bottom right"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Nutraceutici",
                            Position = "Top right"
                        });
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CfClient")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdPharmacist")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("IdPrescription")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdPharmacist");

                    b.HasIndex("IdPrescription")
                        .IsUnique()
                        .HasFilter("[IdPrescription] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.OrderProd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int");

                    b.Property<Guid>("IdCompany")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdDrawer")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("isMed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdDrawer");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Animali.Hospitalization", b =>
                {
                    b.HasOne("BuildWeek2_Be_Team7.Models.Animali.Pet", "Pet")
                        .WithMany("Hospitalizations")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Animali.MedicalExam", b =>
                {
                    b.HasOne("BuildWeek2_Be_Team7.Models.Animali.Pet", "Pet")
                        .WithMany("MedicalExams")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BuildWeek2_Be_Team7.Models.Auth.ApplicationUser", "Vet")
                        .WithMany("MedicalExams")
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Vet");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Animali.Pet", b =>
                {
                    b.HasOne("BuildWeek2_Be_Team7.Models.Animali.Race", "Race")
                        .WithMany("Pets")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildWeek2_Be_Team7.Models.Auth.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Auth.ApplicationUserRole", b =>
                {
                    b.HasOne("BuildWeek2_Be_Team7.Models.Auth.ApplicationRole", "Role")
                        .WithMany("ApplicationUserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildWeek2_Be_Team7.Models.Auth.ApplicationUser", "User")
                        .WithMany("ApplicationUserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Order", b =>
                {
                    b.HasOne("BuildWeek2_Be_Team7.Models.Auth.ApplicationUser", "Pharmacist")
                        .WithMany("Pharmacists")
                        .HasForeignKey("IdPharmacist")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildWeek2_Be_Team7.Models.Pharmacy.Prescription", "Prescription")
                        .WithOne("Order")
                        .HasForeignKey("BuildWeek2_Be_Team7.Models.Pharmacy.Order", "IdPrescription");

                    b.Navigation("Pharmacist");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.OrderProd", b =>
                {
                    b.HasOne("BuildWeek2_Be_Team7.Models.Pharmacy.Order", "Order")
                        .WithMany("OrderProds")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildWeek2_Be_Team7.Models.Pharmacy.Product", "Product")
                        .WithMany("OrderProds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Product", b =>
                {
                    b.HasOne("BuildWeek2_Be_Team7.Models.Pharmacy.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildWeek2_Be_Team7.Models.Pharmacy.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuildWeek2_Be_Team7.Models.Pharmacy.Drawer", "Drawer")
                        .WithMany("Products")
                        .HasForeignKey("IdDrawer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Drawer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BuildWeek2_Be_Team7.Models.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BuildWeek2_Be_Team7.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BuildWeek2_Be_Team7.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BuildWeek2_Be_Team7.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Animali.Pet", b =>
                {
                    b.Navigation("Hospitalizations");

                    b.Navigation("MedicalExams");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Animali.Race", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Auth.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationUserRole");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Auth.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserRole");

                    b.Navigation("MedicalExams");

                    b.Navigation("Pharmacists");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Company", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Drawer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Order", b =>
                {
                    b.Navigation("OrderProds");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Prescription", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("BuildWeek2_Be_Team7.Models.Pharmacy.Product", b =>
                {
                    b.Navigation("OrderProds");
                });
#pragma warning restore 612, 618
        }
    }
}
